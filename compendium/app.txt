Global variables:
    app: the Flask application
    async_mode: the method that SocketIO handles calls
    socketio: the SocketIO serverside handler
    login_manager: the user handler
    csrf: CSRF authenticator handler
    GOOGLE_CLIENT_ID: the Google OAuth application id
    GOOGLE_CLIENT_SECRET: the Google OAuth application "password"
    GOOGLE_DISCOVERY_URL: the endpoint for Google OAuth requests
    client: OAuth client handler
    scheduler: the handler for clearing inactive rooms
    spam_timeout: the time in seconds of the window used to determine spamming
    spam_penalty: the time in seconds of the window a client is muted
    spam_max_messages: the minimym number of messages that can be sent in `spam_timeout` seconds to be considered a spammer
    npc_images: a list of the link to the basic npc character token image

get_google_provider_cfg:
    GOOGLE_DISCOVERY_URL: see entry in "Global variables"

readify_form_errors:
    form: the form that has failed validation
    error_list: a list of formatted errors a form has
    error: an unformatted error pulled directly from the validated form
    error_message: a single formatted error used as an intermediate value between `error` and `error_list`

process_character_form:
    form: a character form
    user_id: the id of the user attempting to make or edit a character
    usage: how the function is being called. Either "play", "edit" or "create"
    route: the endpoint of the form should the form fail to validate
    values: a Tuple of the values entered in a validated form. This variable is what is added to the database
    error_list: a list of formatted errors from `readify_form_errors`

process_room_form:
    form: a room form
    user_id: the id of the user attempting to make or edit a room
    usage: how the function is being called. Either "edit" or "create"
    route: the endpoint of the form should the form fail to validate
    values: a Tuple of the values entered in a validated form. This variable is what is added to the database
    error_list: a list of formatted errors from `readify_form_errors`

determine_if_user_spamming:
    chats: a list of all the chats a user has sent in a room
    max_messages: see `spam_max_messages` in Global variables
    timeframe: see `spam_timeout` in Global variables
    current_time: the time the function starts running
    total_messages_user_sent: total number of messages the user has sent in the last `timeframe` seconds
    message: an individual chat in from `chats`

character_icon_add_database:
    character_name: the name of the character
    username: the username of the owner of the character
    character_image: the URL to the character token image
    user_id: the id of the owner of the user
    room_id: the id of the room the character is in
    initial_height: the default height of the character token
    initial_width: the default width of the character token
    initial_top: the default y value of the upper left corner of the character token
    initial_left: the default x value of the upper left corner of the character token
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    user_id_character_name: the html id of the character token
    json_character_to_add: a dictionary of the character token being added
    map_status_json: a jsonified version of `walla_walla` for use in the database
    updated_character_icon_status: a dictionary of the updated character tokens

clean_dbs:
    current_time: the time the function is run
    benchmark_time: 24 hours in the past of `current_time`
    open_rooms_past_due: a list of rooms which have not had an update in 24 hours

load_user:
    user_id: the id of the user that has connected
    db_response: the data regarding the user with id `user_id` grabbed from the database

sent_to_login:
    No variables used

/characters:
    user_id: the id of the current user
    characters: a list of all the characters owned by the user

/characters/create:
    form: the form entered by the user
    user_id: the id of the current user
    route: the desired endpoint of the form
    action: the default endpoint of the form

/characters/edit/<name>:
    name: the name of the character being edited
    user_id: the id of the current user
    form: the form entered by the user
    character: all the values of the character with the specified `name` and `user_id`

/home:
    authenticated: a Boolean value stating if a character is authenticated
    username: the supplied username the user is attempting to choose
    form: the form entered by the current user
    error_list: a list of formatted errors supplied by `form` and `readify_form_errors`
    room_id: the id of the room the user is attempting to spectate or play
    i: a interator over the room_object and active_room tables

/user/settings:
    user_id: the id of the current user
    characters: a list of characters owned by the user
    user_email: the email of the user
    new_username: the new username a user is attempting to change their username to
    form: the form entered by the user
    error_list: a list of formatted errors

/rooms:
    created_rooms: a list of rooms owned by the user
    active_rooms: a subset of `created_rooms` that have active rooms open

/rooms/create:
    form: the form entered by the user
    user_id: the id of the current user

/rooms/<room_id>:
    room_id: the id of the specified room
    user_id the id of the current user
    form: the form entered by the user
    room: all the information of the room with id `room_id` stored in the database

/generate_room:
    user_id: the id of the user generating an active room
    room_name: the name of the room which is being used as a template
    random_key: the 8 digit public room id

/play/<room_id>:
    room_id: the room id of the active room
    user_id: the id of the current user
    image_url: the URL of the battlemap
    map_owner: the user id of the owner of the room
    characters: a list of characters owned by the user

/spectate/<room_id>:
    room_id: the room id of the active room
    image_url: the URL of the battlemap

/:
    see `/home`

/login:
    authorization_endpoint: the URL of the Google OAuth authenticator
    request_uri: the full URI of the Google OAuth authenticator request

/login/callback:
    code: the code returned by Google OAuth
    google_provider_cfg: the object containing most of our information regarding Google OAuth
    token_endpoint: the endpoint of the Google OAuth token authenticator
    token_url: the URL of the Google OAuth authenticator
    headers: the headers of the GET request to Google OAuth
    body: the body of the GET request to Google OAuth
    token_reponse: the POST response to Google OAuth
    uri: the lookup URL provided by Google
    unique_id: the Google id
    users_email: the email of the user
    picture: the URL to the Google profile picture of the user
    user: A User object with all the information gathered from Google

/logout:
    No variables used

/delete:
    user_id: the id of the user deleting their account

/api/races:
    races: a dictionary mapping races to their attributes
    subraces: a dictionary mapping races to subraces

/api/classes:
    classes: a dictionary mapping classes to their attributes
    subclasses: a dictionary mapping classes to their subclasses

'set_initiative':
    message: the dictionary received from the front end
    time_received: the time the message was received
    character_name: the name of the character getting an initiative update
    initiative: the new value of a character's initiative
    username: the username of the owner of the character
    room_id: the id of the room that sent the message
    user_id: the id of the user with `username`
    description: the log of who's initiative was updated

'sent_chat':
    message: the dictionary received from the front end
    time_received: the time the message was received
    user_id: the id of the current user
    username: the id of the user who sent the chat
    room_id: the id of the room that sent the message
    chat: the actual chat sent in the room_name
    chats: a list of all chats sent by the user in the room

'start_combat':
    message: the dictionary received from the front end
    time_received: the time the message was received
    user_id: the id of the user who started combat
    room_id: the id of the room where combat is starting
    characters: a sorted list of characters in the given room 
    first_character: the character with the highest initiative in the room
    character_id: the owner of `first_character`
    character_name: the name of `first_character`
    username: the name of the user who owns `first_character`
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    user_id_character_name: the html id of the character token
    json_character_to_update: a dictionary of the character token being updated
    characters_json: a json representation of `walla_walla`

'end_combat':
    message: the dictionary received from the front end
    time_received: the time the message was received
    user_id: the id of the user who ended combat
    room_id: the id of the room where combat is ending
    character: all the information related to the character whose turn it is
    character_id: the owner of `character`
    character_name: the name of `character`
    username: the name of the user who owns `character`
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    user_id_character_name: the html id of the character token
    json_character_to_update: a dictionary of the character token being updated
    characters_json: a json representation of `walla_walla`

'end_session':
    message: the dictionary received from the front end
    room_id: the id of the room

'end_turn':
    message: the dictionary received from the front end
    time_received: the time the message was received
    previous_character_id: the id of the owner of `previous_character_name`
    previous_character_name: the name of the character whose turn just ended
    next_character_name: the name of the next character
    previous_username: the username of the owner of `previous_character_name`
    next_username: the username of the owner of `next_character_name`
    room_id: the id of the open room
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    next_user_id_character_name: the html id of the `next_character_name`'s token
    previous_user_id_character_name: the html id of the `previous_character_name`'s token
    previous_json_character_to_update: a dictionary of the `previous_character_name`'s token
    previous_json_character_to_update: a dictionary of the `next_character_name`'s token
    characters_json: a json representation of `walla_walla`

'on_join':
    message: the dictionary received from the front end

'join_actions':
    message: the dictionary received from the front end
    room_id: the id of the room the user is joining
    time_received: the time the message was received
    user_id: the id of the user who is joining
    username: the username of the user who is joining
    initiatives: a list of all characters and their initaives in the room
    chats: a list of all chats in the room
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    your_characters: a list of all characters owned by `user_id`
    character_names_read_from_db: a list of all character names in `your_characters`
    name: each individual character in `characacter_names_read_from_db`
    player_id: id of the owner of each character in `walla_walla`
    character: one character from `your_characters`
    item: an interator over `initiatives` then `chats`

'character_icon_update_database':
    message: the dictionary received from the front end
    username: the user of the owner of the character
    room_id: the room where a character token is being updated
    temp_read_for_user_id: the dictionary of character tokens in the room
    character: a character token in `temp_read_for_user_id`
    walla_walla: the dictionary of character tokens in the room
    wrong_room: a list of the rooms of character tokens in `walla_walla` that don't match `room_id`
    i: an interator over `walla_walla` then `wrong_room`
    new_top: the new y value of the upper left corner of the character token
    new_left: the new x value of the upper left corner of the character token
    new_width: the new width of the character token
    new_height: the new height of the character token
    json_character_to_update: a dictionary of the character token being updated
    characters_json: a json representation of `walla_walla`

'add_character':
    message: the dictionary received from the front end
    character_name: the name of the character being added to the room
    room_id: the id of the room
    user_id: the id of the owner of `character_name`
    username: the username of the owner of `character_name`
    temp_db_read_character_token: the URL of the character token
    initiative: the true initiative of the character
    character_time: the true URL of the character token
    temp_db_read_init_value: the initiative of the character

'add_npc':
    message: the dictionary received from the front end
    room_id: the id of the room
    user_id: the id of the DM of the room
    random_key: a random 4 digit code for the NPC
    character_name: the name of the new NPC
    username: the username of the DM
    initiative: the true initiative of the npc
    temp_db_read_init_value: the initiative of the character

CSRFError handler:
    No variables used

HTTPException handler:
    No variables used

Exception handler:
    No variables used

/process_error:
    No variables used

App running:
    gunincorn_logger: the built in Gunicorn logger
